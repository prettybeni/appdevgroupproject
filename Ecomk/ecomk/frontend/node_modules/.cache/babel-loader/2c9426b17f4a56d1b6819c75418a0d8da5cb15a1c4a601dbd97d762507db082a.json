{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      usernameOrEmail: '',\n      password: '',\n      errorMessage: ''\n    };\n  },\n  methods: {\n    async handleLogin() {\n      this.errorMessage = ''; // Reset error message\n\n      const loginUrl = 'http://localhost:5000/api';\n      try {\n        const response = await fetch(loginUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email: this.usernameOrEmail,\n            password: this.password\n          }) // Adjusted field name to \"email\"\n        });\n        if (!response.ok) {\n          const errorData = await response.json();\n          this.errorMessage = errorData.message || 'Login failed. Please try again.';\n          return;\n        }\n        const data = await response.json();\n        console.log('Login successful:', data);\n\n        // Clear the form fields after successful login\n        this.usernameOrEmail = '';\n        this.password = '';\n\n        // Redirect after successful login\n        this.$router.push('/dashboard'); // Redirect to home page or any other page\n      } catch (error) {\n        console.error('Error during login:', error);\n        this.errorMessage = 'An error occurred. Please try again later.';\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","usernameOrEmail","password","errorMessage","methods","handleLogin","loginUrl","response","fetch","method","headers","body","JSON","stringify","email","ok","errorData","json","message","console","log","$router","push","error"],"sources":["C:\\Users\\norma\\project\\ecomk\\frontend\\src\\views\\Login.vue"],"sourcesContent":["<template>\n  <div class=\"login-container\">\n    <h1>Login</h1>\n    <form @submit.prevent=\"handleLogin\">\n      <div class=\"form-group\">\n        <label for=\"usernameOrEmail\">Email or Username</label>\n        <input type=\"text\" id=\"usernameOrEmail\" v-model=\"usernameOrEmail\" required placeholder=\"Email or username\" />\n      </div>\n      <div class=\"form-group\">\n        <label for=\"password\">Password</label>\n        <input type=\"password\" id=\"password\" v-model=\"password\" required placeholder=\"Enter your password\" />\n      </div>\n      <button type=\"submit\">Login</button>\n      <div v-if=\"errorMessage\" class=\"error\">{{ errorMessage }}</div>\n      <div class=\"footer\">\n        <p>Don't have an account? <router-link to=\"/register\">Register here</router-link></p>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      usernameOrEmail: '',\n      password: '',\n      errorMessage: ''\n    };\n  },\n  methods: {\n    async handleLogin() {\n      this.errorMessage = ''; // Reset error message\n\n      const loginUrl = 'http://localhost:5000/api';\n\n      try {\n        const response = await fetch(loginUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ email: this.usernameOrEmail, password: this.password }), // Adjusted field name to \"email\"\n        });\n\n        if (!response.ok) {\n          const errorData = await response.json();\n          this.errorMessage = errorData.message || 'Login failed. Please try again.';\n          return;\n        }\n\n        const data = await response.json();\n        console.log('Login successful:', data);\n        \n        // Clear the form fields after successful login\n        this.usernameOrEmail = '';\n        this.password = '';\n\n        // Redirect after successful login\n        this.$router.push('/dashboard'); // Redirect to home page or any other page\n      } catch (error) {\n        console.error('Error during login:', error);\n        this.errorMessage = 'An error occurred. Please try again later.';\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.login-container {\n  max-width: 400px;\n  margin: 50px auto;\n  padding: 20px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  background-color: #f9f9f9;\n}\n.form-group {\n  margin-bottom: 15px;\n}\nlabel {\n  display: block;\n  margin-bottom: 5px;\n}\ninput {\n  width: 100%;\n  padding: 8px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\nbutton {\n  width: 100%;\n  padding: 10px;\n  background-color: #28a745;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\nbutton:hover {\n  background-color: #218838;\n}\n.error {\n  color: red;\n  margin-top: 10px;\n}\n.footer {\n  margin-top: 20px;\n}\n</style>\n"],"mappings":";AAsBA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,eAAe,EAAE,EAAE;MACnBC,QAAQ,EAAE,EAAE;MACZC,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,WAAWA,CAAA,EAAG;MAClB,IAAI,CAACF,YAAW,GAAI,EAAE,EAAE;;MAExB,MAAMG,QAAO,GAAI,2BAA2B;MAE5C,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAACF,QAAQ,EAAE;UACrCG,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEC,KAAK,EAAE,IAAI,CAACb,eAAe;YAAEC,QAAQ,EAAE,IAAI,CAACA;UAAS,CAAC,CAAC,CAAE;QAClF,CAAC,CAAC;QAEF,IAAI,CAACK,QAAQ,CAACQ,EAAE,EAAE;UAChB,MAAMC,SAAQ,GAAI,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;UACvC,IAAI,CAACd,YAAW,GAAIa,SAAS,CAACE,OAAM,IAAK,iCAAiC;UAC1E;QACF;QAEA,MAAMlB,IAAG,GAAI,MAAMO,QAAQ,CAACU,IAAI,CAAC,CAAC;QAClCE,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEpB,IAAI,CAAC;;QAEtC;QACA,IAAI,CAACC,eAAc,GAAI,EAAE;QACzB,IAAI,CAACC,QAAO,GAAI,EAAE;;QAElB;QACA,IAAI,CAACmB,OAAO,CAACC,IAAI,CAAC,YAAY,CAAC,EAAE;MACnC,EAAE,OAAOC,KAAK,EAAE;QACdJ,OAAO,CAACI,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;QAC3C,IAAI,CAACpB,YAAW,GAAI,4CAA4C;MAClE;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}