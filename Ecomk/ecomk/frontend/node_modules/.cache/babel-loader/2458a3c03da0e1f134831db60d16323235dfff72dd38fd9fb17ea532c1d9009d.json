{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      product: {\n        name: '',\n        price: '',\n        category: '',\n        description: '',\n        // Added description to match form field\n        image: null // Store the file object here\n      },\n      successMessage: '',\n      // Success message for feedback\n      errorMessage: '' // Error message for feedback\n    };\n  },\n  methods: {\n    // Handle file input change for image upload\n    handleImageUpload(event) {\n      this.product.image = event.target.files[0];\n    },\n    // Add product\n    async addProduct() {\n      // Basic validation\n      if (!this.product.name || !this.product.price || !this.product.category || !this.product.description || !this.product.image) {\n        this.errorMessage = 'Please fill in all fields and select an image';\n        return;\n      }\n\n      // Prepare FormData for submission\n      const formData = new FormData();\n      formData.append('name', this.product.name);\n      formData.append('price', this.product.price);\n      formData.append('category', this.product.category);\n      formData.append('description', this.product.description);\n      formData.append('image', this.product.image); // Append the image file\n\n      try {\n        const response = await axios.post('http://localhost:5000/api/admin/addProd', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data' // Set the correct content type for form data\n          }\n        });\n        if (response.status === 201) {\n          this.successMessage = 'Product added successfully';\n          this.$router.push('/admin'); // Redirect to the admin page\n        } else {\n          this.errorMessage = 'Failed to add product';\n        }\n      } catch (error) {\n        console.error('Error adding product:', error);\n        this.errorMessage = 'An error occurred while adding the product';\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","product","name","price","category","description","image","successMessage","errorMessage","methods","handleImageUpload","event","target","files","addProduct","formData","FormData","append","response","post","headers","status","$router","push","error","console"],"sources":["C:\\Users\\norma\\project\\ecomk\\frontend\\src\\views\\Add.vue"],"sourcesContent":["<template>\r\n  <div class=\"add-product\">\r\n    <h1>Add New Product</h1>\r\n    <form @submit.prevent=\"addProduct\">\r\n      <div>\r\n        <label for=\"productName\">Product Name</label>\r\n        <input type=\"text\" id=\"productName\" v-model=\"product.name\" required />\r\n      </div>\r\n\r\n      <div>\r\n        <label for=\"productPrice\">Price</label>\r\n        <input type=\"number\" id=\"productPrice\" v-model=\"product.price\" required />\r\n      </div>\r\n\r\n      <div>\r\n        <label for=\"productCategory\">Category</label>\r\n        <input type=\"text\" id=\"productCategory\" v-model=\"product.category\" required />\r\n      </div>\r\n\r\n      <div>\r\n        <label for=\"productDescription\">Description</label>\r\n        <textarea id=\"productDescription\" v-model=\"product.description\" required></textarea>\r\n      </div>\r\n\r\n      <div>\r\n        <label for=\"productImage\">Product Image</label>\r\n        <input type=\"file\" id=\"productImage\" @change=\"handleImageUpload\" accept=\"image/*\" required />\r\n      </div>\r\n\r\n      <button type=\"submit\">Add Product</button>\r\n\r\n      <!-- Success and error messages -->\r\n      <p v-if=\"successMessage\" class=\"success\">{{ successMessage }}</p>\r\n      <p v-if=\"errorMessage\" class=\"error\">{{ errorMessage }}</p>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      product: {\r\n        name: '',\r\n        price: '',\r\n        category: '',\r\n        description: '', // Added description to match form field\r\n        image: null // Store the file object here\r\n      },\r\n      successMessage: '', // Success message for feedback\r\n      errorMessage: '', // Error message for feedback\r\n    };\r\n  },\r\n  methods: {\r\n    // Handle file input change for image upload\r\n    handleImageUpload(event) {\r\n      this.product.image = event.target.files[0];\r\n    },\r\n\r\n    // Add product\r\n    async addProduct() {\r\n      // Basic validation\r\n      if (!this.product.name || !this.product.price || !this.product.category || !this.product.description || !this.product.image) {\r\n        this.errorMessage = 'Please fill in all fields and select an image';\r\n        return;\r\n      }\r\n\r\n      // Prepare FormData for submission\r\n      const formData = new FormData();\r\n      formData.append('name', this.product.name);\r\n      formData.append('price', this.product.price);\r\n      formData.append('category', this.product.category);\r\n      formData.append('description', this.product.description);\r\n      formData.append('image', this.product.image); // Append the image file\r\n\r\n      try {\r\n        const response = await axios.post('http://localhost:5000/api/admin/addProd', formData, {\r\n          headers: {\r\n            'Content-Type': 'multipart/form-data', // Set the correct content type for form data\r\n          },\r\n        });\r\n\r\n        if (response.status === 201) {\r\n          this.successMessage = 'Product added successfully';\r\n          this.$router.push('/admin'); // Redirect to the admin page\r\n        } else {\r\n          this.errorMessage = 'Failed to add product';\r\n        }\r\n      } catch (error) {\r\n        console.error('Error adding product:', error);\r\n        this.errorMessage = 'An error occurred while adding the product';\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n  .add-product {\r\n    padding: 20px;\r\n  }\r\n  \r\n  form {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 15px;\r\n  }\r\n  \r\n  input, textarea {\r\n    padding: 10px;\r\n    margin-top: 5px;\r\n    width: 100%;\r\n  }\r\n  \r\n  button {\r\n    padding: 10px;\r\n    background-color: #4CAF50;\r\n    color: white;\r\n    border: none;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  button:hover {\r\n    background-color: #45a049;\r\n  }\r\n\r\n  .success {\r\n    color: green;\r\n    margin-top: 10px;\r\n  }\r\n\r\n  .error {\r\n    color: red;\r\n    margin-top: 10px;\r\n  }\r\n</style>\r\n"],"mappings":";AAuCA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE;QACPC,IAAI,EAAE,EAAE;QACRC,KAAK,EAAE,EAAE;QACTC,QAAQ,EAAE,EAAE;QACZC,WAAW,EAAE,EAAE;QAAE;QACjBC,KAAK,EAAE,IAAG,CAAE;MACd,CAAC;MACDC,cAAc,EAAE,EAAE;MAAE;MACpBC,YAAY,EAAE,EAAE,CAAE;IACpB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP;IACAC,iBAAiBA,CAACC,KAAK,EAAE;MACvB,IAAI,CAACV,OAAO,CAACK,KAAI,GAAIK,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC5C,CAAC;IAED;IACA,MAAMC,UAAUA,CAAA,EAAG;MACjB;MACA,IAAI,CAAC,IAAI,CAACb,OAAO,CAACC,IAAG,IAAK,CAAC,IAAI,CAACD,OAAO,CAACE,KAAI,IAAK,CAAC,IAAI,CAACF,OAAO,CAACG,QAAO,IAAK,CAAC,IAAI,CAACH,OAAO,CAACI,WAAU,IAAK,CAAC,IAAI,CAACJ,OAAO,CAACK,KAAK,EAAE;QAC3H,IAAI,CAACE,YAAW,GAAI,+CAA+C;QACnE;MACF;;MAEA;MACA,MAAMO,QAAO,GAAI,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAE,IAAI,CAAChB,OAAO,CAACC,IAAI,CAAC;MAC1Ca,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE,IAAI,CAAChB,OAAO,CAACE,KAAK,CAAC;MAC5CY,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAChB,OAAO,CAACG,QAAQ,CAAC;MAClDW,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAE,IAAI,CAAChB,OAAO,CAACI,WAAW,CAAC;MACxDU,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE,IAAI,CAAChB,OAAO,CAACK,KAAK,CAAC,EAAE;;MAE9C,IAAI;QACF,MAAMY,QAAO,GAAI,MAAMnB,KAAK,CAACoB,IAAI,CAAC,yCAAyC,EAAEJ,QAAQ,EAAE;UACrFK,OAAO,EAAE;YACP,cAAc,EAAE,qBAAqB,CAAE;UACzC;QACF,CAAC,CAAC;QAEF,IAAIF,QAAQ,CAACG,MAAK,KAAM,GAAG,EAAE;UAC3B,IAAI,CAACd,cAAa,GAAI,4BAA4B;UAClD,IAAI,CAACe,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC,EAAE;QAC/B,OAAO;UACL,IAAI,CAACf,YAAW,GAAI,uBAAuB;QAC7C;MACF,EAAE,OAAOgB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7C,IAAI,CAAChB,YAAW,GAAI,4CAA4C;MAClE;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}