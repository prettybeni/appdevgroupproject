{"ast":null,"code":"export default {\n  data() {\n    return {\n      usernameOrEmail: '',\n      // The field to hold username or email input\n      errorMessage: '',\n      // To display error messages\n      successMessage: '' // To display success messages\n    };\n  },\n  methods: {\n    async handleResetPassword() {\n      this.errorMessage = ''; // Reset error message\n      this.successMessage = ''; // Reset success message\n\n      const resetPasswordUrl = 'http://localhost:5000/api/reset-password'; // Endpoint to handle password reset\n\n      try {\n        console.log(\"Sending reset password request with:\", {\n          identifier: this.usernameOrEmail\n        });\n        const response = await fetch(resetPasswordUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            identifier: this.usernameOrEmail\n          }) // Send email or username\n        });\n        console.log(\"Response received:\", response);\n        if (!response.ok) {\n          const errorData = await response.json();\n          this.errorMessage = errorData.message || 'Unable to send reset link. Please try again.';\n          return;\n        }\n        const data = await response.json();\n        console.log('Reset password request successful:', data);\n\n        // Display success message\n        if (data.success) {\n          this.successMessage = 'If this email/username exists, you will receive a password reset link shortly.';\n        } else {\n          this.errorMessage = 'Unable to process the request. Please check your input and try again.';\n        }\n      } catch (error) {\n        console.error('Error during password reset request:', error);\n        this.errorMessage = 'An error occurred. Please try again later.';\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","usernameOrEmail","errorMessage","successMessage","methods","handleResetPassword","resetPasswordUrl","console","log","identifier","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","message","success","error"],"sources":["C:\\Users\\norma\\project\\ecomk\\frontend\\src\\views\\Reset.vue"],"sourcesContent":["<template>\r\n    <div class=\"reset-password-container\">\r\n      <h1>Reset Password</h1>\r\n      <form @submit.prevent=\"handleResetPassword\">\r\n        <div class=\"form-group\">\r\n          <label for=\"usernameOrEmail\">Email or Username</label>\r\n          <input \r\n            type=\"text\" \r\n            id=\"usernameOrEmail\" \r\n            v-model=\"usernameOrEmail\" \r\n            required \r\n            placeholder=\"Enter your email or username\" \r\n          />\r\n        </div>\r\n        <button type=\"submit\">Send Reset Link</button>\r\n        <div v-if=\"errorMessage\" class=\"error\">{{ errorMessage }}</div>\r\n        <div v-if=\"successMessage\" class=\"success\">{{ successMessage }}</div>\r\n      </form>\r\n      <div class=\"footer\">\r\n        <p>Remembered your password? <router-link to=\"/\">Login here</router-link></p>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        usernameOrEmail: '', // The field to hold username or email input\r\n        errorMessage: '', // To display error messages\r\n        successMessage: '', // To display success messages\r\n      };\r\n    },\r\n    methods: {\r\n        async handleResetPassword() {\r\n  this.errorMessage = ''; // Reset error message\r\n  this.successMessage = ''; // Reset success message\r\n\r\n  const resetPasswordUrl = 'http://localhost:5000/api/reset-password'; // Endpoint to handle password reset\r\n\r\n  try {\r\n    console.log(\"Sending reset password request with:\", { identifier: this.usernameOrEmail });\r\n\r\n    const response = await fetch(resetPasswordUrl, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ identifier: this.usernameOrEmail }), // Send email or username\r\n    });\r\n\r\n    console.log(\"Response received:\", response);\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      this.errorMessage = errorData.message || 'Unable to send reset link. Please try again.';\r\n      return;\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log('Reset password request successful:', data);\r\n\r\n    // Display success message\r\n    if (data.success) {\r\n      this.successMessage = 'If this email/username exists, you will receive a password reset link shortly.';\r\n    } else {\r\n      this.errorMessage = 'Unable to process the request. Please check your input and try again.';\r\n    }\r\n  } catch (error) {\r\n    console.error('Error during password reset request:', error);\r\n    this.errorMessage = 'An error occurred. Please try again later.';\r\n  }\r\n}\r\n\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .reset-password-container {\r\n    max-width: 400px;\r\n    margin: 50px auto;\r\n    padding: 20px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 5px;\r\n    background-color: #f9f9f9;\r\n  }\r\n  \r\n  .form-group {\r\n    margin-bottom: 15px;\r\n  }\r\n  \r\n  label {\r\n    display: block;\r\n    margin-bottom: 5px;\r\n  }\r\n  \r\n  input {\r\n    width: 100%;\r\n    padding: 8px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n  }\r\n  \r\n  button {\r\n    width: 100%;\r\n    padding: 10px;\r\n    background-color: #007bff;\r\n    color: white;\r\n    border: none;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  button:hover {\r\n    background-color: #0056b3;\r\n  }\r\n  \r\n  .error {\r\n    color: red;\r\n    margin-top: 10px;\r\n  }\r\n  \r\n  .success {\r\n    color: green;\r\n    margin-top: 10px;\r\n  }\r\n  \r\n  .footer {\r\n    margin-top: 20px;\r\n  }\r\n  </style>\r\n  "],"mappings":"AAyBE,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,eAAe,EAAE,EAAE;MAAE;MACrBC,YAAY,EAAE,EAAE;MAAE;MAClBC,cAAc,EAAE,EAAE,CAAE;IACtB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACL,MAAMC,mBAAmBA,CAAA,EAAG;MAClC,IAAI,CAACH,YAAW,GAAI,EAAE,EAAE;MACxB,IAAI,CAACC,cAAa,GAAI,EAAE,EAAE;;MAE1B,MAAMG,gBAAe,GAAI,0CAA0C,EAAE;;MAErE,IAAI;QACFC,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAE;UAAEC,UAAU,EAAE,IAAI,CAACR;QAAgB,CAAC,CAAC;QAEzF,MAAMS,QAAO,GAAI,MAAMC,KAAK,CAACL,gBAAgB,EAAE;UAC7CM,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEP,UAAU,EAAE,IAAI,CAACR;UAAgB,CAAC,CAAC,CAAE;QAC9D,CAAC,CAAC;QAEFM,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEE,QAAQ,CAAC;QAE3C,IAAI,CAACA,QAAQ,CAACO,EAAE,EAAE;UAChB,MAAMC,SAAQ,GAAI,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;UACvC,IAAI,CAACjB,YAAW,GAAIgB,SAAS,CAACE,OAAM,IAAK,8CAA8C;UACvF;QACF;QAEA,MAAMpB,IAAG,GAAI,MAAMU,QAAQ,CAACS,IAAI,CAAC,CAAC;QAClCZ,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAER,IAAI,CAAC;;QAEvD;QACA,IAAIA,IAAI,CAACqB,OAAO,EAAE;UAChB,IAAI,CAAClB,cAAa,GAAI,gFAAgF;QACxG,OAAO;UACL,IAAI,CAACD,YAAW,GAAI,uEAAuE;QAC7F;MACF,EAAE,OAAOoB,KAAK,EAAE;QACdf,OAAO,CAACe,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;QAC5D,IAAI,CAACpB,YAAW,GAAI,4CAA4C;MAClE;IACF;EAEI;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}