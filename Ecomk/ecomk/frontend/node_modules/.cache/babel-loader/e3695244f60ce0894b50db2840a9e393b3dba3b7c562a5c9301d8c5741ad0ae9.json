{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      newPassword: '',\n      confirmPassword: '',\n      errorMessage: ''\n    };\n  },\n  methods: {\n    async submitNewPassword() {\n      if (this.newPassword !== this.confirmPassword) {\n        this.errorMessage = \"Passwords do not match.\";\n        return;\n      }\n      this.errorMessage = '';\n      try {\n        // Retrieve token and log for verification\n        const token = this.$route.params.token; // For dynamic segments in the URL\n        console.log('Token:', token);\n        if (!token) {\n          this.errorMessage = \"Invalid or expired token.\";\n          return;\n        }\n        const response = await fetch(`http://localhost:8080/api/reset-password`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            token,\n            newPassword: this.newPassword\n          })\n        });\n        if (response.ok) {\n          alert('Password successfully reset. Redirecting to login...');\n          this.$router.push('/');\n        } else {\n          const data = await response.json();\n          this.errorMessage = data.message || 'An error occurred. Please try again.';\n        }\n      } catch (error) {\n        console.error('Fetch error:', error);\n        this.errorMessage = 'An error occurred. Please try again.';\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","newPassword","confirmPassword","errorMessage","methods","submitNewPassword","token","$route","params","console","log","response","fetch","method","headers","body","JSON","stringify","ok","alert","$router","push","json","message","error"],"sources":["C:\\Users\\norma\\project\\ecomk\\frontend\\src\\views\\NewPassword.vue"],"sourcesContent":["<template>\r\n    <div class=\"new-password-page\">\r\n      <h2>Reset Password</h2>\r\n      \r\n      <form @submit.prevent=\"submitNewPassword\">\r\n        <div class=\"form-group\">\r\n          <label for=\"newPassword\">New Password</label>\r\n          <input \r\n            type=\"password\" \r\n            id=\"newPassword\" \r\n            v-model=\"newPassword\" \r\n            required \r\n          />\r\n        </div>\r\n  \r\n        <div class=\"form-group\">\r\n          <label for=\"confirmPassword\">Confirm New Password</label>\r\n          <input \r\n            type=\"password\" \r\n            id=\"confirmPassword\" \r\n            v-model=\"confirmPassword\" \r\n            required \r\n          />\r\n        </div>\r\n  \r\n        <p v-if=\"errorMessage\" class=\"error-message\">{{ errorMessage }}</p>\r\n        \r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        newPassword: '',\r\n        confirmPassword: '',\r\n        errorMessage: ''\r\n      };\r\n    },\r\n    methods: {\r\n        async submitNewPassword() {\r\n  if (this.newPassword !== this.confirmPassword) {\r\n    this.errorMessage = \"Passwords do not match.\";\r\n    return;\r\n  }\r\n\r\n  this.errorMessage = '';\r\n\r\n  try {\r\n    // Retrieve token and log for verification\r\n    const token = this.$route.params.token;  // For dynamic segments in the URL\r\nconsole.log('Token:', token);\r\n\r\n\r\n    if (!token) {\r\n      this.errorMessage = \"Invalid or expired token.\";\r\n      return;\r\n    }\r\n\r\n    const response = await fetch(`http://localhost:8080/api/reset-password`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ token, newPassword: this.newPassword })\r\n    });\r\n\r\n    if (response.ok) {\r\n      alert('Password successfully reset. Redirecting to login...');\r\n      this.$router.push('/');\r\n    } else {\r\n      const data = await response.json();\r\n      this.errorMessage = data.message || 'An error occurred. Please try again.';\r\n    }\r\n  } catch (error) {\r\n    console.error('Fetch error:', error);\r\n    this.errorMessage = 'An error occurred. Please try again.';\r\n  }\r\n}\r\n\r\n\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .new-password-page {\r\n    max-width: 400px;\r\n    margin: 0 auto;\r\n    padding: 2em;\r\n    border: 1px solid #ddd;\r\n    border-radius: 8px;\r\n  }\r\n  \r\n  .form-group {\r\n    margin-bottom: 1em;\r\n  }\r\n  \r\n  .error-message {\r\n    color: red;\r\n    font-size: 0.9em;\r\n  }\r\n  \r\n  button {\r\n    padding: 0.5em 1em;\r\n    border: none;\r\n    background-color: #4CAF50;\r\n    color: white;\r\n    font-size: 1em;\r\n    cursor: pointer;\r\n    border-radius: 4px;\r\n  }\r\n  \r\n  button:hover {\r\n    background-color: #45a049;\r\n  }\r\n  </style>\r\n  "],"mappings":";AAiCE,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE,EAAE;MACfC,eAAe,EAAE,EAAE;MACnBC,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACL,MAAMC,iBAAiBA,CAAA,EAAG;MAChC,IAAI,IAAI,CAACJ,WAAU,KAAM,IAAI,CAACC,eAAe,EAAE;QAC7C,IAAI,CAACC,YAAW,GAAI,yBAAyB;QAC7C;MACF;MAEA,IAAI,CAACA,YAAW,GAAI,EAAE;MAEtB,IAAI;QACF;QACA,MAAMG,KAAI,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACF,KAAK,EAAG;QAC7CG,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEJ,KAAK,CAAC;QAGxB,IAAI,CAACA,KAAK,EAAE;UACV,IAAI,CAACH,YAAW,GAAI,2BAA2B;UAC/C;QACF;QAEA,MAAMQ,QAAO,GAAI,MAAMC,KAAK,CAAC,0CAA0C,EAAE;UACvEC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEX,KAAK;YAAEL,WAAW,EAAE,IAAI,CAACA;UAAY,CAAC;QAC/D,CAAC,CAAC;QAEF,IAAIU,QAAQ,CAACO,EAAE,EAAE;UACfC,KAAK,CAAC,sDAAsD,CAAC;UAC7D,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC;QACxB,OAAO;UACL,MAAMrB,IAAG,GAAI,MAAMW,QAAQ,CAACW,IAAI,CAAC,CAAC;UAClC,IAAI,CAACnB,YAAW,GAAIH,IAAI,CAACuB,OAAM,IAAK,sCAAsC;QAC5E;MACF,EAAE,OAAOC,KAAK,EAAE;QACdf,OAAO,CAACe,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;QACpC,IAAI,CAACrB,YAAW,GAAI,sCAAsC;MAC5D;IACF;EAGI;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}