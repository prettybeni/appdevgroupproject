{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'Login',\n  data() {\n    return {\n      usernameOrEmail: '',\n      password: '',\n      errorMessage: ''\n    };\n  },\n  methods: {\n    async handleLogin() {\n      this.errorMessage = ''; // Reset error message\n\n      const loginUrl = 'http://localhost:5000/api'; // Adjusted endpoint for login\n\n      try {\n        const response = await fetch(loginUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email: this.usernameOrEmail,\n            password: this.password\n          })\n        });\n        if (!response.ok) {\n          const errorData = await response.json();\n          this.errorMessage = errorData.message || 'Login failed. Please try again.';\n          return;\n        }\n        const data = await response.json();\n        console.log('Login successful:', data);\n\n        // Check the role and redirect accordingly\n        if (data.success) {\n          if (data.redirectUrl) {\n            this.$router.push(data.redirectUrl); // Redirect based on role (cashier, admin, user)\n          } else {\n            this.errorMessage = 'Role not recognized or missing redirect URL.';\n          }\n        } else {\n          this.errorMessage = 'Login failed. Please try again.';\n        }\n      } catch (error) {\n        console.error('Error during login:', error);\n        this.errorMessage = 'An error occurred. Please try again later.';\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","usernameOrEmail","password","errorMessage","methods","handleLogin","loginUrl","response","fetch","method","headers","body","JSON","stringify","email","ok","errorData","json","message","console","log","success","redirectUrl","$router","push","error"],"sources":["C:\\Users\\norma\\project\\ecomk\\frontend\\src\\views\\Login.vue"],"sourcesContent":["<template class=\"body\">\n  <div id=\"bg\">\n    <div class=\"login-container\">\n      <h1>Login</h1><br><br>\n      <form @submit.prevent=\"handleLogin\">\n        <div class=\"form-group inline\">\n  <label for=\"usernameOrEmail\">Email or Username</label>\n  <input type=\"text\" id=\"usernameOrEmail\" v-model=\"usernameOrEmail\" required placeholder=\"Email or username\" />\n</div>\n<div class=\"form-group inline\">\n  <label for=\"password\">Password</label>\n  <input type=\"password\" id=\"password\" v-model=\"password\" required placeholder=\"Enter your password\" />\n  <br>\n  <p id=\"res\"><router-link to=\"/reset-password\">Forgot your password?</router-link></p> <!-- Reset password link -->\n</div>\n\n          \n\n       \n        \n        <button type=\"submit\">Login</button>\n        <div v-if=\"errorMessage\" class=\"error\">{{ errorMessage }}</div>\n        <div class=\"footer\">\n          <p>Don't have an account? <router-link to=\"/register\">Register here</router-link></p>\n        </div>\n      </form>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name:'Login',\n  data() {\n    return {\n      usernameOrEmail: '',\n      password: '',\n      errorMessage: ''\n    };\n  },\n  methods: {\n    async handleLogin() {\n      this.errorMessage = ''; // Reset error message\n\n      const loginUrl = 'http://localhost:5000/api'; // Adjusted endpoint for login\n\n      try {\n        const response = await fetch(loginUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            email: this.usernameOrEmail, \n            password: this.password\n          }),\n        });\n\n        if (!response.ok) {\n          const errorData = await response.json();\n          this.errorMessage = errorData.message || 'Login failed. Please try again.';\n          return;\n        }\n\n        const data = await response.json();\n        console.log('Login successful:', data);\n\n        // Check the role and redirect accordingly\n        if (data.success) {\n          if (data.redirectUrl) {\n            this.$router.push(data.redirectUrl); // Redirect based on role (cashier, admin, user)\n          } else {\n            this.errorMessage = 'Role not recognized or missing redirect URL.';\n          }\n        } else {\n          this.errorMessage = 'Login failed. Please try again.';\n        }\n      } catch (error) {\n        console.error('Error during login:', error);\n        this.errorMessage = 'An error occurred. Please try again later.';\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Apply background color to the entire page */\n#bg {\n  background-color: #D8C4A3;\n  height: 100vh; /* Make sure it takes up the full height of the viewport */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n/* Style for the login container */\n.login-container {\n  max-width: 430px; /* Match the width of textboxes */\n  padding: 40px 40px; /* Adjust padding */\n  border: 2px solid rgba(255,255,255,0.1);\n  background-color: rgba(255,255,255,0.13); /* Transparent background to show the page color */\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); /* Optional: Add shadow for better contrast */\n  border-radius: 10px;\n  backdrop-filter: blur(10px);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n/* Form group styling */\n.form-group {\n  margin-bottom: 20px; /* Adjusted spacing between form elements */\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n}\n\n.form-group label {\n  font-size: 16px;\n  font-weight: 500;\n  margin-bottom: 8px; /* Space between label and input */\n}\n\n.form-group input {\n  width: 100%;\n  height: 50px; /* Match the textbox height */\n  background-color: rgba(255,255,255,0.07);\n  border-radius: 3px;\n  padding: 0 10px;\n  margin-top: 5px; /* Adjust the margin between the label and input */\n  font-size: 14px;\n  font-weight: 300;\n}\n\n.form-group.inline {\n  flex-direction: row; /* Align label and input in a row */\n  align-items: center; /* Align them vertically in the center */\n}\n\n.form-group.inline label {\n  margin-right: 10px; /* Space between label and input */\n  margin-bottom: 0; /* Remove bottom margin */\n}\n\n#res {\n  text-align: center;\n  margin-top: 10px;\n}\n\nbutton {\n  margin-top: 30px;\n  width: 100%;\n  padding: 15px 0;\n  background-color: #28a745;\n  color: white;\n  font-size: 18px;\n  font-weight: 600;\n  border-radius: 4px;\n  border: none;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background-color: #218838;\n}\n\n.error {\n  color: red;\n  margin-top: 10px;\n}\n\n.footer {\n  margin-top: 20px;\n  text-align: center;\n}\n\n</style>\n"],"mappings":";AA+BA,eAAe;EACbA,IAAI,EAAC,OAAO;EACZC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,eAAe,EAAE,EAAE;MACnBC,QAAQ,EAAE,EAAE;MACZC,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,WAAWA,CAAA,EAAG;MAClB,IAAI,CAACF,YAAW,GAAI,EAAE,EAAE;;MAExB,MAAMG,QAAO,GAAI,2BAA2B,EAAE;;MAE9C,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAACF,QAAQ,EAAE;UACrCG,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACnBC,KAAK,EAAE,IAAI,CAACb,eAAe;YAC3BC,QAAQ,EAAE,IAAI,CAACA;UACjB,CAAC;QACH,CAAC,CAAC;QAEF,IAAI,CAACK,QAAQ,CAACQ,EAAE,EAAE;UAChB,MAAMC,SAAQ,GAAI,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;UACvC,IAAI,CAACd,YAAW,GAAIa,SAAS,CAACE,OAAM,IAAK,iCAAiC;UAC1E;QACF;QAEA,MAAMlB,IAAG,GAAI,MAAMO,QAAQ,CAACU,IAAI,CAAC,CAAC;QAClCE,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEpB,IAAI,CAAC;;QAEtC;QACA,IAAIA,IAAI,CAACqB,OAAO,EAAE;UAChB,IAAIrB,IAAI,CAACsB,WAAW,EAAE;YACpB,IAAI,CAACC,OAAO,CAACC,IAAI,CAACxB,IAAI,CAACsB,WAAW,CAAC,EAAE;UACvC,OAAO;YACL,IAAI,CAACnB,YAAW,GAAI,8CAA8C;UACpE;QACF,OAAO;UACL,IAAI,CAACA,YAAW,GAAI,iCAAiC;QACvD;MACF,EAAE,OAAOsB,KAAK,EAAE;QACdN,OAAO,CAACM,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;QAC3C,IAAI,CAACtB,YAAW,GAAI,4CAA4C;MAClE;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}