{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"card\"\n};\nconst _hoisted_2 = {\n  key: 1,\n  class: \"card\"\n};\nconst _hoisted_3 = {\n  key: 2,\n  class: \"card\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return $data.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, \"Verifying...\")) : $data.error ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, _toDisplayString($data.error), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"h2\", null, _toDisplayString($data.successMessage), 1 /* TEXT */), _cache[0] || (_cache[0] = _createElementVNode(\"p\", null, \"Your email has been successfully verified.\", -1 /* HOISTED */))]));\n}","map":{"version":3,"names":["key","class","$data","loading","_createElementBlock","_hoisted_1","error","_hoisted_2","_toDisplayString","_hoisted_3","_createElementVNode","successMessage"],"sources":["C:\\Users\\norma\\project\\ecomk\\frontend\\src\\views\\Verify.vue"],"sourcesContent":["<template>\r\n  <div v-if=\"loading\" class=\"card\">Verifying...</div>\r\n  <div v-else-if=\"error\" class=\"card\">{{ error }}</div>\r\n  <div v-else class=\"card\">\r\n    <h2>{{ successMessage }}</h2>\r\n    <p>Your email has been successfully verified.</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport { useRouter } from 'vue-router'; // Use Vue Router for redirection\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      token: this.$route.query.token,  // Grab the token from the URL query\r\n      loading: true,\r\n      successMessage: 'Email Verified Successfully!',\r\n      error: ''\r\n    };\r\n  },\r\n  created() {\r\n    this.verifyAccount();\r\n  },\r\n  methods: {\r\n    async verifyAccount() {\r\n      try {\r\n        const token = this.$route.query.token;  // Retrieve token from query string\r\n        const response = await axios.get(`http://localhost:5000/api/verify?token=${token}`);\r\n        this.successMessage = response.data.message;\r\n\r\n        // Redirect to the login page after 5 seconds\r\n        setTimeout(() => {\r\n          this.$router.push('/');  // Redirect to the login page\r\n        }, 5000);\r\n      } catch (err) {\r\n        if (err.response) {\r\n          console.error('Error response:', err.response);  // Log the error response for debugging\r\n          this.error = err.response.data.message;  // Display the error message from the backend\r\n        } else {\r\n          this.error = 'An error occurred';\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.card {\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  background-color: #f8f8f8;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  max-width: 400px;\r\n  margin: 20px auto;\r\n  text-align: center;\r\n}\r\n\r\nh2 {\r\n  color: #28a745; /* Success green */\r\n}\r\n\r\np {\r\n  color: #333;\r\n  font-size: 16px;\r\n}\r\n\r\n.loading, .error {\r\n  font-size: 18px;\r\n  color: #d9534f; /* Error red */\r\n}\r\n</style>\r\n"],"mappings":";;EAAAA,GAAA;EACsBC,KAAK,EAAC;;;EAD5BD,GAAA;EAEyBC,KAAK,EAAC;;;EAF/BD,GAAA;EAGcC,KAAK,EAAC;;;SAFPC,KAAA,CAAAC,OAAO,I,cAAlBC,mBAAA,CAAmD,OAAnDC,UAAmD,EAAlB,cAAY,KAC7BH,KAAA,CAAAI,KAAK,I,cAArBF,mBAAA,CAAqD,OAArDG,UAAqD,EAAAC,gBAAA,CAAdN,KAAA,CAAAI,KAAK,qB,cAC5CF,mBAAA,CAGM,OAHNK,UAGM,GAFJC,mBAAA,CAA6B,YAAAF,gBAAA,CAAtBN,KAAA,CAAAS,cAAc,kB,0BACrBD,mBAAA,CAAiD,WAA9C,4CAA0C,qB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}