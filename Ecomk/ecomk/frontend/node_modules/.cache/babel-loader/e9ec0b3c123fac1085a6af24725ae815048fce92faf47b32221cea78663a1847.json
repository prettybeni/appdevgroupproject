{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      ingredients: [],\n      // List of ingredients from the API\n      showModal: false,\n      // Controls modal visibility\n      selectedIngredient: null,\n      // Ingredient selected for stock addition\n      modalQuantity: 0 // Quantity to add in the modal\n    };\n  },\n  methods: {\n    // Fetch ingredients from the API\n    async fetchIngredients() {\n      try {\n        const response = await axios.get('http://localhost:5000/api/admin/manageIngredients');\n        this.ingredients = response.data;\n      } catch (error) {\n        console.error('Error fetching ingredients:', error);\n      }\n    },\n    // Update ingredient name\n    async editIngredientName(index) {\n      const ingredient = this.ingredients[index];\n      try {\n        await axios.put(`/api/ingredients/${ingredient.id}`, {\n          name: ingredient.name\n        });\n        alert('Ingredient name updated!');\n      } catch (error) {\n        console.error('Error updating ingredient name:', error);\n      }\n    },\n    // Open the modal to add stock\n    openModal(index) {\n      this.selectedIngredient = this.ingredients[index];\n      this.modalQuantity = 0; // Reset quantity in modal\n      this.showModal = true;\n    },\n    // Close the modal\n    closeModal() {\n      this.showModal = false;\n      this.selectedIngredient = null;\n    },\n    // Add quantity to the selected ingredient\n    async addQuantity() {\n      if (this.modalQuantity > 0) {\n        try {\n          await axios.put(`/api/ingredients/${this.selectedIngredient.id}/add-quantity`, {\n            quantity: this.modalQuantity\n          });\n\n          // Update local state\n          this.selectedIngredient.quantity += this.modalQuantity;\n          alert('Stock added successfully!');\n        } catch (error) {\n          console.error('Error adding stock:', error);\n        } finally {\n          this.closeModal(); // Close the modal after updating\n        }\n      } else {\n        alert('Please enter a valid stock quantity.');\n      }\n    }\n  },\n  mounted() {\n    this.fetchIngredients();\n  }\n};","map":{"version":3,"names":["axios","data","ingredients","showModal","selectedIngredient","modalQuantity","methods","fetchIngredients","response","get","error","console","editIngredientName","index","ingredient","put","id","name","alert","openModal","closeModal","addQuantity","quantity","mounted"],"sources":["C:\\Users\\norma\\project\\ecomk\\frontend\\src\\views\\manageIngredient.vue"],"sourcesContent":["<template>\r\n    <div class=\"manage-ingredients\">\r\n      <h1>Manage Ingredients</h1>\r\n  \r\n      <table border=\"1\">\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Quantity</th>\r\n            <th>Unit</th>\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr v-for=\"(ingredient, index) in ingredients\" :key=\"ingredient.id\">\r\n            <td>\r\n              <input \r\n                type=\"text\" \r\n                v-model=\"ingredient.name\" \r\n                @change=\"editIngredientName(index)\" \r\n              />\r\n            </td>\r\n            <td>{{ ingredient.quantity }}</td>\r\n            <td>{{ ingredient.unit }}</td>\r\n            <td>\r\n              <button @click=\"openModal(index)\">Add Stock</button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n  \r\n      <!-- Modal -->\r\n      <div v-if=\"showModal\" class=\"modal\">\r\n        <div class=\"modal-content\">\r\n          <h2>Add Stock for {{ selectedIngredient.name }}</h2>\r\n          <input \r\n            type=\"number\" \r\n            v-model=\"modalQuantity\" \r\n            min=\"1\" \r\n            placeholder=\"Enter quantity to add\" \r\n          />\r\n          <div class=\"modal-actions\">\r\n            <button @click=\"addQuantity\">Confirm</button>\r\n            <button @click=\"closeModal\">Cancel</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      ingredients: [], // List of ingredients from the API\r\n      showModal: false, // Controls modal visibility\r\n      selectedIngredient: null, // Ingredient selected for stock addition\r\n      modalQuantity: 0, // Quantity to add in the modal\r\n    };\r\n  },\r\n  methods: {\r\n    // Fetch ingredients from the API\r\n    async fetchIngredients() {\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/api/admin/manageIngredients');\r\n        this.ingredients = response.data;\r\n      } catch (error) {\r\n        console.error('Error fetching ingredients:', error);\r\n      }\r\n    },\r\n\r\n    // Update ingredient name\r\n    async editIngredientName(index) {\r\n      const ingredient = this.ingredients[index];\r\n      try {\r\n        await axios.put(`/api/ingredients/${ingredient.id}`, { name: ingredient.name });\r\n        alert('Ingredient name updated!');\r\n      } catch (error) {\r\n        console.error('Error updating ingredient name:', error);\r\n      }\r\n    },\r\n\r\n    // Open the modal to add stock\r\n    openModal(index) {\r\n      this.selectedIngredient = this.ingredients[index];\r\n      this.modalQuantity = 0; // Reset quantity in modal\r\n      this.showModal = true;\r\n    },\r\n\r\n    // Close the modal\r\n    closeModal() {\r\n      this.showModal = false;\r\n      this.selectedIngredient = null;\r\n    },\r\n\r\n    // Add quantity to the selected ingredient\r\n    async addQuantity() {\r\n      if (this.modalQuantity > 0) {\r\n        try {\r\n          await axios.put(`/api/ingredients/${this.selectedIngredient.id}/add-quantity`, {\r\n            quantity: this.modalQuantity,\r\n          });\r\n\r\n          // Update local state\r\n          this.selectedIngredient.quantity += this.modalQuantity;\r\n          alert('Stock added successfully!');\r\n        } catch (error) {\r\n          console.error('Error adding stock:', error);\r\n        } finally {\r\n          this.closeModal(); // Close the modal after updating\r\n        }\r\n      } else {\r\n        alert('Please enter a valid stock quantity.');\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    this.fetchIngredients();\r\n  },\r\n};\r\n</script>\r\n<style scoped>\r\n.manage-ingredients {\r\n  padding: 20px;\r\n}\r\n\r\ntable {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\nth, td {\r\n  padding: 10px;\r\n  text-align: left;\r\n  border: 1px solid #ddd;\r\n}\r\n\r\nth {\r\n  background-color: #f4f4f4;\r\n}\r\n\r\nbutton {\r\n  padding: 5px 10px;\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  cursor: pointer;\r\n  border-radius: 3px;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.modal {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 1000;\r\n}\r\n\r\n.modal-content {\r\n  background-color: white;\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n  width: 400px;\r\n  text-align: center;\r\n}\r\n\r\n.modal-actions {\r\n  display: flex;\r\n  justify-content: space-around;\r\n  margin-top: 20px;\r\n}\r\n\r\n.modal-actions button {\r\n  width: 45%;\r\n}\r\n</style>\r\n"],"mappings":"AAmDA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE,EAAE;MAAE;MACjBC,SAAS,EAAE,KAAK;MAAE;MAClBC,kBAAkB,EAAE,IAAI;MAAE;MAC1BC,aAAa,EAAE,CAAC,CAAE;IACpB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP;IACA,MAAMC,gBAAgBA,CAAA,EAAG;MACvB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMR,KAAK,CAACS,GAAG,CAAC,mDAAmD,CAAC;QACrF,IAAI,CAACP,WAAU,GAAIM,QAAQ,CAACP,IAAI;MAClC,EAAE,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD;IACF,CAAC;IAED;IACA,MAAME,kBAAkBA,CAACC,KAAK,EAAE;MAC9B,MAAMC,UAAS,GAAI,IAAI,CAACZ,WAAW,CAACW,KAAK,CAAC;MAC1C,IAAI;QACF,MAAMb,KAAK,CAACe,GAAG,CAAC,oBAAoBD,UAAU,CAACE,EAAE,EAAE,EAAE;UAAEC,IAAI,EAAEH,UAAU,CAACG;QAAK,CAAC,CAAC;QAC/EC,KAAK,CAAC,0BAA0B,CAAC;MACnC,EAAE,OAAOR,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACzD;IACF,CAAC;IAED;IACAS,SAASA,CAACN,KAAK,EAAE;MACf,IAAI,CAACT,kBAAiB,GAAI,IAAI,CAACF,WAAW,CAACW,KAAK,CAAC;MACjD,IAAI,CAACR,aAAY,GAAI,CAAC,EAAE;MACxB,IAAI,CAACF,SAAQ,GAAI,IAAI;IACvB,CAAC;IAED;IACAiB,UAAUA,CAAA,EAAG;MACX,IAAI,CAACjB,SAAQ,GAAI,KAAK;MACtB,IAAI,CAACC,kBAAiB,GAAI,IAAI;IAChC,CAAC;IAED;IACA,MAAMiB,WAAWA,CAAA,EAAG;MAClB,IAAI,IAAI,CAAChB,aAAY,GAAI,CAAC,EAAE;QAC1B,IAAI;UACF,MAAML,KAAK,CAACe,GAAG,CAAC,oBAAoB,IAAI,CAACX,kBAAkB,CAACY,EAAE,eAAe,EAAE;YAC7EM,QAAQ,EAAE,IAAI,CAACjB;UACjB,CAAC,CAAC;;UAEF;UACA,IAAI,CAACD,kBAAkB,CAACkB,QAAO,IAAK,IAAI,CAACjB,aAAa;UACtDa,KAAK,CAAC,2BAA2B,CAAC;QACpC,EAAE,OAAOR,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;QAC7C,UAAU;UACR,IAAI,CAACU,UAAU,CAAC,CAAC,EAAE;QACrB;MACF,OAAO;QACLF,KAAK,CAAC,sCAAsC,CAAC;MAC/C;IACF;EACF,CAAC;EACDK,OAAOA,CAAA,EAAG;IACR,IAAI,CAAChB,gBAAgB,CAAC,CAAC;EACzB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}