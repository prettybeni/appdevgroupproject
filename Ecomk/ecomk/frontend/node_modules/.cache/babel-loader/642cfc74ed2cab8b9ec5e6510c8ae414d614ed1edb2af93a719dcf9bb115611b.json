{"ast":null,"code":"export default {\n  data() {\n    return {\n      usernameOrEmail: '',\n      errorMessage: '',\n      successMessage: ''\n    };\n  },\n  methods: {\n    async handleResetPassword() {\n      this.errorMessage = '';\n      this.successMessage = '';\n      const resetPasswordUrl = 'http://localhost:5000/api/reset-password';\n      try {\n        const response = await fetch(resetPasswordUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            identifier: this.usernameOrEmail\n          })\n        });\n        if (!response.ok) {\n          const errorData = await response.json();\n          this.errorMessage = errorData.message || 'Unable to send reset link. Please try again.';\n          return;\n        }\n        const data = await response.json();\n        if (data.success) {\n          this.successMessage = 'Reset password email sent.';\n        } else {\n          this.errorMessage = 'Unable to process the request. Please check your input and try again.';\n        }\n      } catch (error) {\n        this.errorMessage = 'An error occurred. Please try again later.';\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","usernameOrEmail","errorMessage","successMessage","methods","handleResetPassword","resetPasswordUrl","response","fetch","method","headers","body","JSON","stringify","identifier","ok","errorData","json","message","success","error"],"sources":["C:\\Users\\norma\\project\\ecomk\\frontend\\src\\views\\Reset.vue"],"sourcesContent":["<template class=\"body\">\r\n  <div id=\"bg\">\r\n    <!-- Container for the image and reset password form -->\r\n    <div class=\"content-wrapper\">\r\n      <!-- Image on the left side -->\r\n      <div class=\"image-container\">\r\n        <img src=\"../../public/img/logo.png\" alt=\"Logo\" class=\"logo-image\" />\r\n      </div>\r\n\r\n      <!-- Reset password form on the right side -->\r\n      <div class=\"reset-password-container\">\r\n        <h1>Reset Password</h1>\r\n        <form @submit.prevent=\"handleResetPassword\">\r\n          <div class=\"form-group\">\r\n            <label for=\"usernameOrEmail\">Email or Username</label>\r\n            <input \r\n              type=\"text\" \r\n              id=\"usernameOrEmail\" \r\n              v-model=\"usernameOrEmail\" \r\n              required \r\n              placeholder=\"Enter your email or username\" \r\n            />\r\n          </div>\r\n          <button type=\"submit\">Send Reset Link</button>\r\n          <div v-if=\"errorMessage\" class=\"error\">{{ errorMessage }}</div>\r\n          <div v-if=\"successMessage\" class=\"success\">{{ successMessage }}</div>\r\n        </form>\r\n        <div class=\"footer\">\r\n          <p>Remembered your password? <router-link to=\"/\">Login here</router-link></p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      usernameOrEmail: '', \r\n      errorMessage: '', \r\n      successMessage: '', \r\n    };\r\n  },\r\n  methods: {\r\n    async handleResetPassword() {\r\n      this.errorMessage = ''; \r\n      this.successMessage = ''; \r\n\r\n      const resetPasswordUrl = 'http://localhost:5000/api/reset-password';\r\n\r\n      try {\r\n        const response = await fetch(resetPasswordUrl, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ identifier: this.usernameOrEmail }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          const errorData = await response.json();\r\n          this.errorMessage = errorData.message || 'Unable to send reset link. Please try again.';\r\n          return;\r\n        }\r\n\r\n        const data = await response.json();\r\n        if (data.success) {\r\n          this.successMessage = 'Reset password email sent.';\r\n        } else {\r\n          this.errorMessage = 'Unable to process the request. Please check your input and try again.';\r\n        }\r\n      } catch (error) {\r\n        this.errorMessage = 'An error occurred. Please try again later.';\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Apply background color and animation */\r\n#bg {\r\n  background: linear-gradient(45deg, #D8C4A3, #A3D8C4, #D8A3C4);\r\n  height: 100vh;\r\n  background-size: 600% 600%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  animation: gradientAnimation 15s ease infinite;\r\n}\r\n\r\n@keyframes gradientAnimation {\r\n  0% { background-position: 0% 50%; }\r\n  50% { background-position: 100% 50%; }\r\n  100% { background-position: 0% 50%; }\r\n}\r\n\r\n/* Container for image and reset password form side by side */\r\n.content-wrapper {\r\n  display: flex;\r\n  width: 80%;\r\n  max-width: 1200px;\r\n}\r\n\r\n.image-container {\r\n  flex: 1;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.logo-image {\r\n  width: 80%;\r\n  max-width: 400px;\r\n  height: auto;\r\n  margin-right: 200px;\r\n}\r\n\r\n.reset-password-container {\r\n  flex: .6;\r\n  padding: 50px 40px;\r\n  border: 2px solid rgba(255, 255, 255, 0.1);\r\n  background-color: rgba(255, 255, 255, 0.13);\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\r\n  border-radius: 10px;\r\n  backdrop-filter: blur(10px);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: stretch;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n}\r\n\r\nlabel {\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  margin-bottom: 10px;\r\n}\r\n\r\ninput {\r\n  display: block;\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n  height: 50px;\r\n  background-color: rgba(255,255,255,0.07);\r\n  border-radius: 3px;\r\n  padding: 0 16px;\r\n  font-size: 14px;\r\n  font-weight: 300;\r\n}\r\n\r\nbutton {\r\n  margin-top: 20px;\r\n  width: 100%;\r\n  padding: 15px 0;\r\n  background-color: #28a745;\r\n  color: white;\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n  border-radius: 4px;\r\n  border: none;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #218838;\r\n}\r\n\r\n.error {\r\n  color: red;\r\n  margin-top: 10px;\r\n  text-align: center;\r\n}\r\n\r\n.success {\r\n  color: green;\r\n  margin-top: 10px;\r\n  text-align: center;\r\n}\r\n\r\n.footer {\r\n  margin-top: 20px;\r\n  text-align: center;\r\n  font-size: 14px;\r\n}\r\n\r\n.footer a {\r\n  color: #007bff;\r\n}\r\n\r\nh1{\r\n  margin-bottom: 30px;\r\n}\r\n</style>\r\n"],"mappings":"AAoCA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,eAAe,EAAE,EAAE;MACnBC,YAAY,EAAE,EAAE;MAChBC,cAAc,EAAE;IAClB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,mBAAmBA,CAAA,EAAG;MAC1B,IAAI,CAACH,YAAW,GAAI,EAAE;MACtB,IAAI,CAACC,cAAa,GAAI,EAAE;MAExB,MAAMG,gBAAe,GAAI,0CAA0C;MAEnE,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAACF,gBAAgB,EAAE;UAC7CG,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEC,UAAU,EAAE,IAAI,CAACb;UAAgB,CAAC;QAC3D,CAAC,CAAC;QAEF,IAAI,CAACM,QAAQ,CAACQ,EAAE,EAAE;UAChB,MAAMC,SAAQ,GAAI,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;UACvC,IAAI,CAACf,YAAW,GAAIc,SAAS,CAACE,OAAM,IAAK,8CAA8C;UACvF;QACF;QAEA,MAAMlB,IAAG,GAAI,MAAMO,QAAQ,CAACU,IAAI,CAAC,CAAC;QAClC,IAAIjB,IAAI,CAACmB,OAAO,EAAE;UAChB,IAAI,CAAChB,cAAa,GAAI,4BAA4B;QACpD,OAAO;UACL,IAAI,CAACD,YAAW,GAAI,uEAAuE;QAC7F;MACF,EAAE,OAAOkB,KAAK,EAAE;QACd,IAAI,CAAClB,YAAW,GAAI,4CAA4C;MAClE;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}