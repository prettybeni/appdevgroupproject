{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      ingredients: [],\n      // List of ingredients from the API\n      showEditModal: false,\n      // Controls visibility of the Edit Name modal\n      showAddStockModal: false,\n      // Controls visibility of the Add Stock modal\n      selectedIngredient: null,\n      // Ingredient selected for any modal\n      modalName: '',\n      // Temporary name for editing in the modal\n      modalQuantity: 0,\n      // Quantity to add in the Add Stock modal\n      isMenuOpen: false // State of the hamburger menu\n    };\n  },\n  methods: {\n    // Fetch ingredients from the API\n    async fetchIngredients() {\n      try {\n        const response = await axios.get('http://localhost:5000/api/admin/manageIngredients');\n        this.ingredients = response.data;\n      } catch (error) {\n        console.error('Error fetching ingredients:', error);\n      }\n    },\n    // Toggle the hamburger menu visibility\n    toggleMenu() {\n      this.isMenuOpen = !this.isMenuOpen;\n    },\n    // Open the Edit Name modal\n    openEditModal(index) {\n      this.selectedIngredient = this.ingredients[index];\n      this.modalName = this.selectedIngredient.name; // Pre-fill with the current name\n      this.showEditModal = true;\n    },\n    // Close the Edit Name modal\n    closeEditModal() {\n      this.showEditModal = false;\n      this.selectedIngredient = null;\n      this.modalName = '';\n    },\n    // Save the edited name\n    async saveNameEdit() {\n      if (this.modalName.trim() === '') {\n        alert('Name cannot be empty.');\n        return;\n      }\n      try {\n        await axios.put(`http://localhost:5000/api/admin/manageIngredients/${this.selectedIngredient.id}`, {\n          name: this.modalName\n        });\n        this.selectedIngredient.name = this.modalName; // Update the local state\n        alert('Ingredient name updated successfully!');\n      } catch (error) {\n        console.error('Error updating ingredient name:', error);\n      } finally {\n        this.closeEditModal();\n      }\n    },\n    // Open the Add Stock modal\n    openAddStockModal(index) {\n      this.selectedIngredient = this.ingredients[index];\n      this.modalQuantity = 0; // Reset the modal input\n      this.showAddStockModal = true;\n    },\n    // Close the Add Stock modal\n    closeAddStockModal() {\n      this.showAddStockModal = false;\n      this.selectedIngredient = null;\n      this.modalQuantity = 0;\n    },\n    // Add quantity to the selected ingredient\n    async addQuantity() {\n      if (this.modalQuantity > 0) {\n        try {\n          await axios.put(`http://localhost:5000/api/admin/manageIngredients/${this.selectedIngredient.id}/add-quantity`, {\n            quantity: this.modalQuantity\n          });\n          // Update local state\n          this.selectedIngredient.quantity += this.modalQuantity;\n          alert('Stock added successfully!');\n        } catch (error) {\n          console.error('Error adding stock:', error);\n        } finally {\n          this.closeAddStockModal();\n        }\n      } else {\n        alert('Please enter a valid stock quantity.');\n      }\n    }\n  },\n  mounted() {\n    this.fetchIngredients();\n  }\n};","map":{"version":3,"names":["axios","data","ingredients","showEditModal","showAddStockModal","selectedIngredient","modalName","modalQuantity","isMenuOpen","methods","fetchIngredients","response","get","error","console","toggleMenu","openEditModal","index","name","closeEditModal","saveNameEdit","trim","alert","put","id","openAddStockModal","closeAddStockModal","addQuantity","quantity","mounted"],"sources":["C:\\Users\\norma\\project\\ecomk\\frontend\\src\\views\\manageIngredient.vue"],"sourcesContent":["<template>\r\n    <div class=\"manage-ingredients\">\r\n      <!-- Hamburger Menu -->\r\n      <div class=\"hamburger-menu\" @click=\"toggleMenu\">\r\n        <span class=\"bar\"></span>\r\n        <span class=\"bar\"></span>\r\n        <span class=\"bar\"></span>\r\n      </div>\r\n  \r\n      <!-- Mobile Menu (Initially Hidden) -->\r\n      <div v-if=\"isMenuOpen\" class=\"mobile-menu\">\r\n        <ul>\r\n          <li><a href=\"#\">Manage Ingredients</a></li>\r\n          <li><a href=\"#\">Other Link</a></li>\r\n          <!-- Add more menu items as needed -->\r\n        </ul>\r\n      </div>\r\n  \r\n      <h1>Manage Ingredients</h1>\r\n      <table border=\"1\">\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Quantity</th>\r\n            <th>Unit</th>\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr v-for=\"(ingredient, index) in ingredients\" :key=\"ingredient.id\">\r\n            <td>{{ ingredient.name }}</td>\r\n            <td>{{ ingredient.quantity }}</td>\r\n            <td>{{ ingredient.unit }}</td>\r\n            <td>\r\n              <button @click=\"openEditModal(index)\">Edit</button>\r\n              <button @click=\"openAddStockModal(index)\">Add Stock</button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n  \r\n      <!-- Edit Name Modal -->\r\n      <div v-if=\"showEditModal\" class=\"modal\">\r\n        <div class=\"modal-content\">\r\n          <h2>Edit Ingredient Name</h2>\r\n          <input \r\n            type=\"text\" \r\n            v-model=\"modalName\" \r\n            placeholder=\"Enter new name\" \r\n          />\r\n          <div class=\"modal-actions\">\r\n            <button @click=\"saveNameEdit\">Save</button>\r\n            <button @click=\"closeEditModal\">Cancel</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  \r\n      <!-- Add Stock Modal -->\r\n      <div v-if=\"showAddStockModal\" class=\"modal\">\r\n        <div class=\"modal-content\">\r\n          <h2>Add Stock for {{ selectedIngredient.name }}</h2>\r\n          <input \r\n            type=\"number\" \r\n            v-model=\"modalQuantity\" \r\n            min=\"1\" \r\n            placeholder=\"Enter quantity to add\" \r\n          />\r\n          <div class=\"modal-actions\">\r\n            <button @click=\"addQuantity\">Confirm</button>\r\n            <button @click=\"closeAddStockModal\">Cancel</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      ingredients: [], // List of ingredients from the API\r\n      showEditModal: false, // Controls visibility of the Edit Name modal\r\n      showAddStockModal: false, // Controls visibility of the Add Stock modal\r\n      selectedIngredient: null, // Ingredient selected for any modal\r\n      modalName: '', // Temporary name for editing in the modal\r\n      modalQuantity: 0, // Quantity to add in the Add Stock modal\r\n      isMenuOpen: false, // State of the hamburger menu\r\n    };\r\n  },\r\n  methods: {\r\n    // Fetch ingredients from the API\r\n    async fetchIngredients() {\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/api/admin/manageIngredients');\r\n        this.ingredients = response.data;\r\n      } catch (error) {\r\n        console.error('Error fetching ingredients:', error);\r\n      }\r\n    },\r\n\r\n    // Toggle the hamburger menu visibility\r\n    toggleMenu() {\r\n      this.isMenuOpen = !this.isMenuOpen;\r\n    },\r\n\r\n    // Open the Edit Name modal\r\n    openEditModal(index) {\r\n      this.selectedIngredient = this.ingredients[index];\r\n      this.modalName = this.selectedIngredient.name; // Pre-fill with the current name\r\n      this.showEditModal = true;\r\n    },\r\n\r\n    // Close the Edit Name modal\r\n    closeEditModal() {\r\n      this.showEditModal = false;\r\n      this.selectedIngredient = null;\r\n      this.modalName = '';\r\n    },\r\n\r\n    // Save the edited name\r\n    async saveNameEdit() {\r\n      if (this.modalName.trim() === '') {\r\n        alert('Name cannot be empty.');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        await axios.put(`http://localhost:5000/api/admin/manageIngredients/${this.selectedIngredient.id}`, { name: this.modalName });\r\n        this.selectedIngredient.name = this.modalName; // Update the local state\r\n        alert('Ingredient name updated successfully!');\r\n      } catch (error) {\r\n        console.error('Error updating ingredient name:', error);\r\n      } finally {\r\n        this.closeEditModal();\r\n      }\r\n    },\r\n\r\n    // Open the Add Stock modal\r\n    openAddStockModal(index) {\r\n      this.selectedIngredient = this.ingredients[index];\r\n      this.modalQuantity = 0; // Reset the modal input\r\n      this.showAddStockModal = true;\r\n    },\r\n\r\n    // Close the Add Stock modal\r\n    closeAddStockModal() {\r\n      this.showAddStockModal = false;\r\n      this.selectedIngredient = null;\r\n      this.modalQuantity = 0;\r\n    },\r\n\r\n    // Add quantity to the selected ingredient\r\n    async addQuantity() {\r\n      if (this.modalQuantity > 0) {\r\n        try {\r\n          await axios.put(`http://localhost:5000/api/admin/manageIngredients/${this.selectedIngredient.id}/add-quantity`, {\r\n            quantity: this.modalQuantity,\r\n          });\r\n          // Update local state\r\n          this.selectedIngredient.quantity += this.modalQuantity;\r\n          alert('Stock added successfully!');\r\n        } catch (error) {\r\n          console.error('Error adding stock:', error);\r\n        } finally {\r\n          this.closeAddStockModal();\r\n        }\r\n      } else {\r\n        alert('Please enter a valid stock quantity.');\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    this.fetchIngredients();\r\n  },\r\n};\r\n</script>\r\n<style scoped>\r\n.manage-ingredients {\r\n  padding: 20px;\r\n}\r\n\r\n/* Hamburger Menu */\r\n.hamburger-menu {\r\n  display: none;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  width: 30px;\r\n  height: 25px;\r\n  cursor: pointer;\r\n}\r\n\r\n.hamburger-menu .bar {\r\n  width: 100%;\r\n  height: 4px;\r\n  background-color: #333;\r\n}\r\n\r\n.mobile-menu {\r\n  position: absolute;\r\n  top: 50px;\r\n  right: 0;\r\n  background-color: #f4f4f4;\r\n  width: 200px;\r\n  border: 1px solid #ddd;\r\n  padding: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.mobile-menu ul {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.mobile-menu li {\r\n  padding: 10px;\r\n}\r\n\r\n.mobile-menu li a {\r\n  text-decoration: none;\r\n  color: #333;\r\n}\r\n\r\n.mobile-menu li a:hover {\r\n  background-color: #ddd;\r\n}\r\n\r\n/* Show hamburger menu on mobile */\r\n@media (max-width: 768px) {\r\n  .hamburger-menu {\r\n    display: flex;\r\n  }\r\n  table {\r\n    display: none; /* Hide the table in mobile view */\r\n  }\r\n}\r\n</style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}