{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport { useRouter } from 'vue-router'; // Use Vue Router for redirection\n\nexport default {\n  data() {\n    return {\n      token: this.$route.query.token,\n      // Grab the token from the URL query\n      loading: true,\n      successMessage: 'Email Verified Successfully!',\n      error: ''\n    };\n  },\n  created() {\n    this.verifyAccount();\n  },\n  methods: {\n    async verifyAccount() {\n      try {\n        const token = this.$route.query.token; // Retrieve token from query string\n        const response = await axios.get(`http://localhost:5000/api/verify?token=${token}`);\n        this.successMessage = response.data.message;\n\n        // Redirect to the login page after 5 seconds\n        setTimeout(() => {\n          this.$router.push('/login'); // Redirect to the login page\n        }, 5000);\n      } catch (err) {\n        if (err.response) {\n          console.error('Error response:', err.response); // Log the error response for debugging\n          this.error = err.response.data.message; // Display the error message from the backend\n        } else {\n          this.error = 'An error occurred';\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","useRouter","data","token","$route","query","loading","successMessage","error","created","verifyAccount","methods","response","get","message","setTimeout","$router","push","err","console"],"sources":["C:\\Users\\norma\\project\\ecomk\\frontend\\src\\views\\Verify.vue"],"sourcesContent":["<template>\r\n  <div v-if=\"loading\" class=\"card\">Verifying...</div>\r\n  <div v-else-if=\"error\" class=\"card\">{{ error }}</div>\r\n  <div v-else class=\"card\">\r\n    <h2>{{ successMessage }}</h2>\r\n    <p>Your email has been successfully verified.</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport { useRouter } from 'vue-router'; // Use Vue Router for redirection\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      token: this.$route.query.token,  // Grab the token from the URL query\r\n      loading: true,\r\n      successMessage: 'Email Verified Successfully!',\r\n      error: ''\r\n    };\r\n  },\r\n  created() {\r\n    this.verifyAccount();\r\n  },\r\n  methods: {\r\n    async verifyAccount() {\r\n      try {\r\n        const token = this.$route.query.token;  // Retrieve token from query string\r\n        const response = await axios.get(`http://localhost:5000/api/verify?token=${token}`);\r\n        this.successMessage = response.data.message;\r\n\r\n        // Redirect to the login page after 5 seconds\r\n        setTimeout(() => {\r\n          this.$router.push('/login');  // Redirect to the login page\r\n        }, 5000);\r\n      } catch (err) {\r\n        if (err.response) {\r\n          console.error('Error response:', err.response);  // Log the error response for debugging\r\n          this.error = err.response.data.message;  // Display the error message from the backend\r\n        } else {\r\n          this.error = 'An error occurred';\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.card {\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  background-color: #f8f8f8;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  max-width: 400px;\r\n  margin: 20px auto;\r\n  text-align: center;\r\n}\r\n\r\nh2 {\r\n  color: #28a745; /* Success green */\r\n}\r\n\r\np {\r\n  color: #333;\r\n  font-size: 16px;\r\n}\r\n\r\n.loading, .error {\r\n  font-size: 18px;\r\n  color: #d9534f; /* Error red */\r\n}\r\n</style>\r\n"],"mappings":";AAUA,OAAOA,KAAI,MAAO,OAAO;AACzB,SAASC,SAAQ,QAAS,YAAY,EAAE;;AAExC,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,IAAI,CAACC,MAAM,CAACC,KAAK,CAACF,KAAK;MAAG;MACjCG,OAAO,EAAE,IAAI;MACbC,cAAc,EAAE,8BAA8B;MAC9CC,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,aAAa,CAAC,CAAC;EACtB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,aAAaA,CAAA,EAAG;MACpB,IAAI;QACF,MAAMP,KAAI,GAAI,IAAI,CAACC,MAAM,CAACC,KAAK,CAACF,KAAK,EAAG;QACxC,MAAMS,QAAO,GAAI,MAAMZ,KAAK,CAACa,GAAG,CAAC,0CAA0CV,KAAK,EAAE,CAAC;QACnF,IAAI,CAACI,cAAa,GAAIK,QAAQ,CAACV,IAAI,CAACY,OAAO;;QAE3C;QACAC,UAAU,CAAC,MAAM;UACf,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC,EAAG;QAChC,CAAC,EAAE,IAAI,CAAC;MACV,EAAE,OAAOC,GAAG,EAAE;QACZ,IAAIA,GAAG,CAACN,QAAQ,EAAE;UAChBO,OAAO,CAACX,KAAK,CAAC,iBAAiB,EAAEU,GAAG,CAACN,QAAQ,CAAC,EAAG;UACjD,IAAI,CAACJ,KAAI,GAAIU,GAAG,CAACN,QAAQ,CAACV,IAAI,CAACY,OAAO,EAAG;QAC3C,OAAO;UACL,IAAI,CAACN,KAAI,GAAI,mBAAmB;QAClC;MACF;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}