{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      product: {\n        name: '',\n        price: '',\n        category: '',\n        image: null // Store the file object here\n      },\n      successMessage: '',\n      // Success message for feedback\n      errorMessage: '' // Error message for feedback\n    };\n  },\n  methods: {\n    // Handle file input change for image upload\n    handleFileUpload(event) {\n      this.product.image = event.target.files[0];\n    },\n    async addProduct() {\n      // Basic validation\n      if (!this.product.name || !this.product.price || !this.product.category || !this.product.image) {\n        this.errorMessage = 'Please fill in all fields and select an image';\n        return;\n      }\n\n      // Prepare FormData for submission\n      const formData = new FormData();\n      formData.append('name', this.product.name);\n      formData.append('price', this.product.price);\n      formData.append('category', this.product.category);\n      formData.append('image', this.product.image); // Append the image file\n\n      axios.post('http://localhost:5000/api/admin/addProd', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data' // Set the correct content type for form data\n        }\n      }).then(response => {\n        console.log('Response received:', response); // Add this to inspect the full response\n        if (response.status === 201) {\n          this.$router.push('/admin'); // Redirect to the admin page\n        } else if (response.status === 400) {\n          this.errorMessage = 'Product already exists';\n        }\n      }).catch(error => {\n        console.error('Error adding product:', error.response?.data || error);\n        this.errorMessage = 'An error occurred while adding the product';\n        console.log('Form Data:', formData);\n        // Check if response exists and log it\n        if (error.response) {\n          console.log('Error Response:', error.response);\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","product","name","price","category","image","successMessage","errorMessage","methods","handleFileUpload","event","target","files","addProduct","formData","FormData","append","post","headers","then","response","console","log","status","$router","push","catch","error"],"sources":["C:\\Users\\norma\\project\\ecomk\\frontend\\src\\views\\Add.vue"],"sourcesContent":["<template>\r\n  <div class=\"add-product\">\r\n    <h1>Add New Product</h1>\r\n    <form @submit.prevent=\"addProduct\">\r\n      <div>\r\n        <label for=\"productName\">Product Name</label>\r\n        <input type=\"text\" id=\"productName\" v-model=\"product.name\" required />\r\n      </div>\r\n\r\n      <div>\r\n        <label for=\"productPrice\">Price</label>\r\n        <input type=\"number\" id=\"productPrice\" v-model=\"product.price\" required />\r\n      </div>\r\n\r\n      <div>\r\n        <label for=\"productCategory\">Category</label>\r\n        <input type=\"text\" id=\"productCategory\" v-model=\"product.category\" required />\r\n      </div>\r\n\r\n      <div>\r\n        <label for=\"productImage\">Product Image</label>\r\n        <input type=\"file\" id=\"productImage\" @change=\"handleFileUpload\" accept=\"image/jpeg\" required />\r\n      </div>\r\n\r\n      <button type=\"submit\">Add Product</button>\r\n\r\n      <!-- Success and error messages -->\r\n      <p v-if=\"successMessage\" class=\"success\">{{ successMessage }}</p>\r\n      <p v-if=\"errorMessage\" class=\"error\">{{ errorMessage }}</p>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      product: {\r\n        name: '',\r\n        price: '',\r\n        category: '',\r\n        image: null // Store the file object here\r\n      },\r\n      successMessage: '', // Success message for feedback\r\n      errorMessage: '', // Error message for feedback\r\n    };\r\n  },\r\n  methods: {\r\n    // Handle file input change for image upload\r\n    handleFileUpload(event) {\r\n      this.product.image = event.target.files[0];\r\n    },\r\n\r\n    async addProduct() {\r\n  // Basic validation\r\n  if (!this.product.name || !this.product.price || !this.product.category || !this.product.image) {\r\n    this.errorMessage = 'Please fill in all fields and select an image';\r\n    return;\r\n  }\r\n\r\n  // Prepare FormData for submission\r\n  const formData = new FormData();\r\n  formData.append('name', this.product.name);\r\n  formData.append('price', this.product.price);\r\n  formData.append('category', this.product.category);\r\n  formData.append('image', this.product.image); // Append the image file\r\n\r\n  axios.post('http://localhost:5000/api/admin/addProd', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data', // Set the correct content type for form data\r\n      },\r\n    })\r\n    .then(response => {\r\n      console.log('Response received:', response);  // Add this to inspect the full response\r\n      if (response.status === 201) {\r\n        this.$router.push('/admin'); // Redirect to the admin page\r\n      } else if (response.status === 400) {\r\n        this.errorMessage = 'Product already exists';\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error adding product:', error.response?.data || error);\r\n      this.errorMessage = 'An error occurred while adding the product';\r\n      console.log('Form Data:', formData);\r\n      // Check if response exists and log it\r\n      if (error.response) {\r\n        console.log('Error Response:', error.response);\r\n      }\r\n    });\r\n}\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n  .add-product {\r\n    padding: 20px;\r\n  }\r\n  \r\n  form {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 15px;\r\n  }\r\n  \r\n  input, textarea {\r\n    padding: 10px;\r\n    margin-top: 5px;\r\n    width: 100%;\r\n  }\r\n  \r\n  button {\r\n    padding: 10px;\r\n    background-color: #4CAF50;\r\n    color: white;\r\n    border: none;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  button:hover {\r\n    background-color: #45a049;\r\n  }\r\n\r\n  .success {\r\n    color: green;\r\n    margin-top: 10px;\r\n  }\r\n\r\n  .error {\r\n    color: red;\r\n    margin-top: 10px;\r\n  }\r\n</style>\r\n"],"mappings":";AAkCA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE;QACPC,IAAI,EAAE,EAAE;QACRC,KAAK,EAAE,EAAE;QACTC,QAAQ,EAAE,EAAE;QACZC,KAAK,EAAE,IAAG,CAAE;MACd,CAAC;MACDC,cAAc,EAAE,EAAE;MAAE;MACpBC,YAAY,EAAE,EAAE,CAAE;IACpB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP;IACAC,gBAAgBA,CAACC,KAAK,EAAE;MACtB,IAAI,CAACT,OAAO,CAACI,KAAI,GAAIK,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC5C,CAAC;IAED,MAAMC,UAAUA,CAAA,EAAG;MACrB;MACA,IAAI,CAAC,IAAI,CAACZ,OAAO,CAACC,IAAG,IAAK,CAAC,IAAI,CAACD,OAAO,CAACE,KAAI,IAAK,CAAC,IAAI,CAACF,OAAO,CAACG,QAAO,IAAK,CAAC,IAAI,CAACH,OAAO,CAACI,KAAK,EAAE;QAC9F,IAAI,CAACE,YAAW,GAAI,+CAA+C;QACnE;MACF;;MAEA;MACA,MAAMO,QAAO,GAAI,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAE,IAAI,CAACf,OAAO,CAACC,IAAI,CAAC;MAC1CY,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE,IAAI,CAACf,OAAO,CAACE,KAAK,CAAC;MAC5CW,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAE,IAAI,CAACf,OAAO,CAACG,QAAQ,CAAC;MAClDU,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE,IAAI,CAACf,OAAO,CAACI,KAAK,CAAC,EAAE;;MAE9CN,KAAK,CAACkB,IAAI,CAAC,yCAAyC,EAAEH,QAAQ,EAAE;QAC5DI,OAAO,EAAE;UACP,cAAc,EAAE,qBAAqB,CAAE;QACzC;MACF,CAAC,EACAC,IAAI,CAACC,QAAO,IAAK;QAChBC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,QAAQ,CAAC,EAAG;QAC9C,IAAIA,QAAQ,CAACG,MAAK,KAAM,GAAG,EAAE;UAC3B,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC,EAAE;QAC/B,OAAO,IAAIL,QAAQ,CAACG,MAAK,KAAM,GAAG,EAAE;UAClC,IAAI,CAAChB,YAAW,GAAI,wBAAwB;QAC9C;MACF,CAAC,EACAmB,KAAK,CAACC,KAAI,IAAK;QACdN,OAAO,CAACM,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAACP,QAAQ,EAAEpB,IAAG,IAAK2B,KAAK,CAAC;QACrE,IAAI,CAACpB,YAAW,GAAI,4CAA4C;QAChEc,OAAO,CAACC,GAAG,CAAC,YAAY,EAAER,QAAQ,CAAC;QACnC;QACA,IAAIa,KAAK,CAACP,QAAQ,EAAE;UAClBC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEK,KAAK,CAACP,QAAQ,CAAC;QAChD;MACF,CAAC,CAAC;IACN;EACE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}