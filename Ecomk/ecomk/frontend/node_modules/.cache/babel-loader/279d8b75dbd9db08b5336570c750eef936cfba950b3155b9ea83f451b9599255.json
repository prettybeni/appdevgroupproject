{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"card\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[0] || (_cache[0] = _createElementVNode(\"h2\", null, \"Verified\", -1 /* HOISTED */)), _cache[1] || (_cache[1] = _createElementVNode(\"p\", null, \"Your email has been successfully verified.\", -1 /* HOISTED */)), $data.countdown > 0 ? (_openBlock(), _createElementBlock(\"p\", _hoisted_2, \"Redirecting in \" + _toDisplayString($data.countdown) + \" seconds...\", 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"p\", _hoisted_3, \"Redirecting...\"))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","$data","countdown","_hoisted_2","_toDisplayString","_hoisted_3"],"sources":["C:\\Users\\norma\\project\\ecomk\\frontend\\src\\views\\Verify.vue"],"sourcesContent":["<template>\r\n  <div class=\"card\">\r\n    <h2>Verified</h2>\r\n    <p>Your email has been successfully verified.</p>\r\n    <p v-if=\"countdown > 0\">Redirecting in {{ countdown }} seconds...</p>\r\n    <p v-else>Redirecting...</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport { useRouter } from 'vue-router'; // Use Vue Router for redirection\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      token: this.$route.query.token,  // Grab the token from the URL query\r\n      countdown: 5,  // Countdown timer for redirect\r\n      error: ''\r\n    };\r\n  },\r\n  created() {\r\n    this.verifyAccount();\r\n    this.startRedirectCountdown();\r\n  },\r\n  methods: {\r\n    async verifyAccount() {\r\n      try {\r\n        const token = this.$route.query.token;  // Retrieve token from query string\r\n        const response = await axios.get(`http://localhost:5000/api/verify?token=${token}`);\r\n\r\n        // Handle the response message if necessary\r\n        console.log(response.data.message);\r\n      } catch (err) {\r\n        if (err.response) {\r\n          console.error('Error response:', err.response);  // Log the error response for debugging\r\n          this.error = err.response.data.message;  // Display the error message from the backend\r\n        } else {\r\n          this.error = 'An error occurred';\r\n        }\r\n      }\r\n    },\r\n    startRedirectCountdown() {\r\n      const interval = setInterval(() => {\r\n        if (this.countdown > 0) {\r\n          this.countdown--;\r\n        } else {\r\n          clearInterval(interval);\r\n          this.$router.push('/');  // Redirect to the login page\r\n        }\r\n      }, 1000); // Update every second\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.card {\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  background-color: #f8f8f8;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  max-width: 400px;\r\n  margin: 20px auto;\r\n  text-align: center;\r\n}\r\n\r\nh2 {\r\n  color: #28a745; /* Success green */\r\n}\r\n\r\np {\r\n  color: #333;\r\n  font-size: 16px;\r\n}\r\n\r\n.loading, .error {\r\n  font-size: 18px;\r\n  color: #d9534f; /* Error red */\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAM;;EADnBC,GAAA;AAAA;;EAAAA,GAAA;AAAA;;uBACEC,mBAAA,CAKM,OALNC,UAKM,G,0BAJJC,mBAAA,CAAiB,YAAb,UAAQ,sB,0BACZA,mBAAA,CAAiD,WAA9C,4CAA0C,sBACpCC,KAAA,CAAAC,SAAS,Q,cAAlBJ,mBAAA,CAAqE,KAJzEK,UAAA,EAI4B,iBAAe,GAAAC,gBAAA,CAAGH,KAAA,CAAAC,SAAS,IAAG,aAAW,oB,cACjEJ,mBAAA,CAA4B,KALhCO,UAAA,EAKc,gBAAc,G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}